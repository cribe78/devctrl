var DevCtrl={stateConfig:["$stateProvider","$locationProvider","$urlRouterProvider",function(b,f,c){b.state("root",{"abstract":!0,url:"",template:"<ui-view />"}).state("root.rooms",{url:"/rooms",templateUrl:"ng/locations.html"}).state("root.room",{url:"/room/:name",templateUrl:"ng/room.html",controller:"RoomCtrl",controllerAs:"room",resolve:DevCtrl.Room.Resolve}).state("root.config",{"abstract":!0,url:"/config",template:"<ui-view />"}).state("root.config.all",{url:"",templateUrl:"ng/config.html"}).state("root.config.table",
{url:"/:table",templateUrl:"ng/tableeditor.html",controller:"TableCtrl",controllerAs:"table",resolve:DevCtrl.Table.Resolve});c.when("/","/rooms");f.html5Mode(!0)}]};DevCtrl.Room={};
DevCtrl.Room.Ctrl=["$stateParams","DataService",function(b,f){var c=this;this.roomName=b.name;this.rooms=f.getTable("rooms");angular.forEach(this.rooms.listed,function(a){a.fields.name==c.roomName&&(c.obj=a,c.id=a.id)});this.panels=this.obj.referenced.panels;this.panelControls=function(a){if(angular.isDefined(a.referenced.panel_controls))return a.referenced.panel_controls};this.togglePanel=function(a){angular.isDefined(a.opened)?a.opened=!a.opened:a.opened=!0};this.isPanelOpen=function(a){return angular.isDefined(a.opened)&&a.opened}}];
DevCtrl.Room.Resolve={loadControls:function(b){return b.getTablePromise("controls")},loadControlTemplates:function(b){return b.getTablePromise("control_templates")},loadRooms:function(b){return b.getTablePromise("rooms")},loadPanels:function(b){return b.getTablePromise("panels")},loadPanelControls:function(b){return b.getTablePromise("panel_controls")},loadControlSets:function(b){return b.getTablePromise("control_sets")}};DevCtrl.MainCtrl=["$state","$mdSidenav","DataService",function(b,f,c){this.msg="Hello World!";this.tiles=[{img:"/images/orc.png"},{img:"/images/pict.png"},{img:"/images/sage.png"}];this.menu=c.getMenu();this.schema=c.getSchemas();this.toggleSidenav=function(a){f(a).toggle()};this.go=function(a){angular.isString(a)?b.go(a):b.go(a.name,a.params)};this.dataModel=c.dataModel}];DevCtrl.Menu={};DevCtrl.Menu.Directive=function(){return{scope:!0,bindToController:{items:"="},controller:function(){},controllerAs:"menu",templateUrl:"ng/menu.html"}};DevCtrl.DataService={};
DevCtrl.DataService.factory=["$http","$mdToast","$timeout","socketFactory",function(b,f,c,a){var e={},g={},l=io("https://devctrl.dwi.ufl.edu/");a=a({ioSocket:l});var h={},k={messenger:a,dataModel:e,addRow:function(d){var a=this;b.post("data.php",d).success(function(b){a.loadData(b);angular.forEach(d,function(a,b){"table"!=b&&(d[b]=null)})}).error(function(d){a.errorToast(d)})},deleteRow:function(d){var a=this;b.delete("data.php/"+d.tableName+"/"+d.id).success(function(d){a.loadData(d)}).error(function(d){a.errorToast(d)})},errorToast:function(d){var a=
"An unknown error has occured";angular.isDefined(d.error)&&(a=d.error);f.show(f.simple().content(a))},getRowRef:function(d,a){if(!angular.isDefined(d))return console.error("error looking up record for undefined table"),{};if(!angular.isDefined(a)||null===a)return console.error("error looking up %s record for undefined key",d),{};var b=this.getTableRef(d);if(angular.isString(g[d].pk))return angular.isDefined(b.indexed[a])||(b.indexed[a]={fields:{},foreign:{},id:a,loaded:!1,referenced:{},tableName:d},
b.listed.push(b.indexed[a])),b.indexed[a];console.error("multi column keys not supported, table %s",d)},getMenu:function(){var a=this;angular.isDefined(e.menu)||(e.menu={items:{}},b.get("menu.php").success(function(a){angular.isDefined(a.menu.items)?(console.log("test/menu.php loaded"),e.menu.items=a.menu.items):console.log("test/menu.php did not return a valid menu object")}).error(function(b){a.errorToast(b)}));return e.menu},getSchema:function(a){var c=this;angular.isDefined(g[a])||(c.getSchemaRef(a),
b.get("schema.php").success(function(a){angular.isDefined(a.schema)&&angular.forEach(a.schema,function(a,d){var b=c.getSchemaRef(d);angular.merge(b,a);angular.isDefined(b.foreign_keys)&&angular.forEach(b.foreign_keys,function(a,d){b.referenced[a]=d})})}).error(function(a){c.errorToast(a)}));return g[a]},getSchemaRef:function(a){angular.isDefined(g[a])||(g[a]={referenced:{},foreign_keys:{}});return g[a]},getSchemas:function(){this.getSchema("controls");return g},getTable:function(a){angular.isDefined(e[a])?
e[a].loaded||(e[a].loaded="pending",this.getTablePromise(a)):(this.getTableRef(a),this.getTablePromise(a));return e[a]},getTablePromise:function(a){var c=this;if(angular.isDefined(a))return b.get("data.php?table="+a).success(function(a){c.loadData(a)}).error(function(a){c.errorToast(a)});console.error("error: attempt to fetch undefined table!")},getTableRef:function(a){angular.isDefined(e[a])||(e[a]={listed:[],indexed:{},loaded:!1});return e[a]},loadData:function(a){var b=this;angular.isDefined(a.update)&&
angular.forEach(a.update,function(a,c){angular.forEach(a,function(a,d){var f=b.getRowRef(c,d);angular.merge(f.fields,a)})});angular.isDefined(a.add)&&angular.forEach(a.add,function(a,c){var d=b.getSchema(c),f=d.pk,g=d.foreign_keys;angular.forEach(a,function(a,d){if(angular.isString(f)){var e=b.getRowRef(c,d);angular.merge(e.fields,a);e.loaded=!0;angular.forEach(g,function(a,d){if(null!==e.fields[d]){var f=b.getRowRef(a,e.fields[d]);angular.isDefined(f.referenced[c])||(f.referenced[c]={});f.referenced[c][e.id]=
e;e.foreign[a]=f;e.foreign[d]=f}else e.foreign[a]=null,e.foreign[d]=null})}else console.error("Error loading %s, multi-keyed records not supported",c)});e[c].loaded="loaded"});angular.isDefined(a.delete)&&angular.forEach(a.delete,function(a,c){var d=b.getSchema(c).pk;angular.forEach(a,function(a,b){angular.isString(d)?delete e[c].indexed[b]:angular.forEach(a,function(a,d){delete e[c].indexed[b][d]})});e[c].listed.length=0;angular.forEach(e[c].indexed,function(a,b){angular.isString(d)?e[c].listed.push(a):
angular.forEach(a,function(a){e[c].listed.push(a)})})})},updateControlValue:function(a){angular.isDefined(h[a.id])&&c.cancel(h[a.id]);h[a.id]=c(function(a,c){var d="control.php/"+a.id;pendingDebounce=!1;b.put(d,a.fields).success(function(a){c.loadData(a)}).error(function(a){c.errorToast(a)})},200,!0,a,this)},updateRow:function(a){var c=this;b.put("data.php/"+a.tableName+"/"+a.id,a.fields).success(function(a){c.loadData(a)}).error(function(a){c.errorToast(a)})}};a.on("control-data",function(a){k.loadData(a)});
return k}];DevCtrl.EnumSelect={};
DevCtrl.EnumSelect.Directive=["DataService",function(b){return{scope:{tableName:"=table",field:"=",selectModel:"="},bindToController:!0,controller:function(b){this.enums=b.getTable("enums");this.enumVals=b.getTable("enum_vals");this.schema=b.getSchema(this.tableName);this.enumId=function(){var b=0,a=this.tableName+"."+this.field.name;angular.forEach(this.enums.indexed,function(e,f){e.fields.name==a&&(b=f)});return b};this.options=function(){var b=this.enumId(),a={};0<b&&(a=this.enums.indexed[b].referenced.enum_vals);return a}},
controllerAs:"enumSelect",templateUrl:"ng/enum-select.html"}}];DevCtrl.Ctrl={};
DevCtrl.Ctrl.Directive=["DataService",function(b){return{scope:{panelControl:"="},bindToController:!0,controller:function(b){this.ctrl=this.panelControl.foreign.controls;this.template=this.ctrl.foreign.control_templates;this.name=this.panelControl.fields.name;this.type=this.template.fields.usertype;this.enums=b.getTable("enums");this.enumVals=b.getTable("enum_vals");var c=this;this.updateValue=function(){b.updateControlValue(c.ctrl)};this.selectMenuItem=function(a){c.ctrl.fields.value=a;c.updateValue()};
this.selectOptions=function(){var a=c.ctrl.fields.enum_id,b={};0<a&&(b=c.enums.indexed[a].referenced.enum_vals);return b}},controllerAs:"ctrl",templateUrl:"ng/ctrl.html"}}];DevCtrl.SwitchSet={};
DevCtrl.SwitchSet.Directive=["DataService",function(b){return{scope:!0,bindToController:{control:"="},controller:function(b){var c=this,a={},e={};this.setAll=function(c){angular.forEach(a,function(a,e){a.fields.value=c;b.updateControlValue(a)})};this.slaveControls=function(){angular.forEach(c.control.referenced.control_sets,function(b,c){e[b.foreign.slave_control_id.id]=b.fields.name;a[b.foreign.slave_control_id.id]=b.foreign.slave_control_id});return a};this.slaveName=function(a){return e[a.id]};this.updateCtrlValue=
function(a){b.updateControlValue(a)}},controllerAs:"switchSet",templateUrl:"ng/switch-set.html"}}];DevCtrl.Record={};DevCtrl.Record.Ctrl=["DataService",function(b){this.obj=this.table.data.indexed[this.id];this.schema=this.table.schema;var f=this;this.deleteRow=function(){b.deleteRow(f.obj);this.table.closeRecord()};this.updateRow=function(){b.updateRow(f.obj);this.table.closeRecord()};this.cloneRow=function(){var c=angular.copy(f.obj.fields);c.table=f.obj.tableName;b.addRow(c);this.table.closeRecord()};this.close=function(){this.table.closeRecord()}}];
DevCtrl.Record.Resolve={loadTable:["tableName","DataService",function(b,f){return f.getTablePromise(b)}]};DevCtrl.FkSelect={};DevCtrl.FkSelect.Directive=["DataService",function(b){return{scope:{tableName:"=table",field:"=",selectModel:"="},bindToController:!0,controller:function(b){this.options=b.getTable(this.tableName);this.schema=b.getSchema(this.tableName)},controllerAs:"fkSelect",templateUrl:"ng/fk-select.html"}}];DevCtrl.Table={};
DevCtrl.Table.Ctrl=["$scope","$stateParams","$mdDialog","DataService",function(b,f,c,a){this.tableName=f.table;this.data=a.getTable(this.tableName);this.schema=a.getSchema(this.tableName);this.newRow={table:this.tableName};a.messenger.emit("status-update",{message:"table "+this.tableName+" loaded"});this.addRow=function(){a.addRow(this.newRow)};this.deleteRow=function(b){b.table=this.tableName;a.deleteRow(b)};this.fkDisplayVal=function(b,c){var e=a.getSchema(this.schema.foreign_keys[b.name]);if(!angular.isDefined(c.foreign[b.name]))return"";
var f=c.foreign[b.name];if(null==f)return"NULL";var d=f.id;angular.isDefined(f.fields[e.fk_name])&&(d=f.fields[e.fk_name]);return d};var e=this;this.openRecord=function(a,b){c.show({targetEvent:a,locals:{id:b,table:e},controller:DevCtrl.Record.Ctrl,controllerAs:"record",bindToController:!0,templateUrl:"ng/record.html",clickOutsideToClose:!0,hasBackdrop:!1})};this.closeRecord=function(){c.hide()}}];DevCtrl.Table.Resolve={tableName:["$stateParams",function(b){return b.table}]};DevCtrl.App=angular.module("DevCtrlApp",["ui.router","ngMaterial","btford.socket-io"]).factory("DataService",DevCtrl.DataService.factory).directive("ctrl",DevCtrl.Ctrl.Directive).directive("coeMenu",DevCtrl.Menu.Directive).directive("fkSelect",DevCtrl.FkSelect.Directive).directive("enumSelect",DevCtrl.EnumSelect.Directive).directive("switchSet",DevCtrl.SwitchSet.Directive).controller("MainCtrl",DevCtrl.MainCtrl).controller("TableCtrl",DevCtrl.Table.Ctrl).controller("RecordCtrl",DevCtrl.Record.Ctrl).controller("RoomCtrl",
DevCtrl.Room.Ctrl).config(DevCtrl.stateConfig).run(["$rootScope",function(b){b.$on("$stateChangeStart",function(b,c,a,e,g){console.log("$stateChangeStart to "+c.to+"- fired when the transition begins. toState,toParams : \n",c,a)});b.$on("$stateChangeError",function(b,c,a,e,g){console.log("$stateChangeError - fired when an error occurs during transition.");console.log(arguments)});b.$on("$stateChangeSuccess",function(b,c,a,e,g){console.log("$stateChangeSuccess to "+c.name+"- fired once the state transition is complete.")});
b.$on("$viewContentLoaded",function(b){console.log("$viewContentLoaded - fired after dom rendered",b)});b.$on("$stateNotFound",function(b,c,a,e){console.log("$stateNotFound "+c.to+"  - fired when a state cannot be found by its name.");console.log(c,a,e)})}]);
