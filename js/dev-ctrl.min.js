var DevCtrl={stateConfig:["$stateProvider","$locationProvider","$urlRouterProvider",function(d,c,a){d.state("rooms",{url:"/rooms",scope:!0,controller:"RoomsCtrl",controllerAs:"rooms",templateUrl:"ng/locations.html",resolve:DevCtrl.Common.Resolve,data:{title:"Locations"}}).state("rooms.room",{url:"/:name",templateUrl:"ng/room.html",controller:"RoomCtrl",controllerAs:"room",data:{listByName:"rooms",title:!1}}).state("endpoints",{url:"/devices",templateUrl:"ng/endpoints.html",resolve:DevCtrl.Common.Resolve,
data:{title:"Devices"}}).state("endpoints.endpoint",{url:"/:id",templateUrl:"ng/endpoint.html",controller:"EndpointCtrl",controllerAs:"endpoint",data:{listByName:"control_endpoints",title:!1}}).state("config",{url:"/config",scope:!0,templateUrl:"ng/config.html",resolve:DevCtrl.Common.Resolve,data:{title:"Configuration"}}).state("config.data",{url:"/data",templateUrl:"ng/data.html",data:{title:"Data Tables"}}).state("config.data.table",{url:"/:name",templateUrl:"ng/tableeditor.html",controller:"TableCtrl",
controllerAs:"table",resolve:DevCtrl.Table.Resolve,data:{title:"Table Editor"}});a.when("/","/rooms");c.html5Mode(!0)}]};DevCtrl.Common={};
DevCtrl.Common.Resolve={loadControls:function(d){return d.getTablePromise("controls")},loadControlTemplates:function(d){return d.getTablePromise("control_templates")},loadRooms:function(d){return d.getTablePromise("rooms")},loadPanels:function(d){return d.getTablePromise("panels")},loadPanelControls:function(d){return d.getTablePromise("panel_controls")},loadEndpointTypes:function(d){return d.getTablePromise("endpoint_types")},loadControlEndpoints:function(d){return d.getTablePromise("control_endpoints")},loadUserInfo:function(d){return d.getAdminAuth()}};DevCtrl.ObjectEditor={};DevCtrl.ObjectEditor.Directive=[function(){return{scope:{object:"="},bindToController:!0,controller:function(){if(!angular.isDefined(this.object)||null==this.object||angular.isArray(this.object))this.object={};this.addItem=function(d,c){angular.isDefined(this.newKey)&&angular.isDefined(this.newVal)&&(this.object[this.newKey]=this.newVal);this.newVal=this.newKey=void 0;angular.element("#oe-new-key").focus()}},controllerAs:"obj",templateUrl:"ng/object-editor.html"}}];DevCtrl.Room={};
DevCtrl.Room.Ctrl=["$stateParams","DataService",function(d,c){var a=this;this.roomName=d.name;this.rooms=c.getTable("rooms");angular.forEach(this.rooms.listed,function(b){b.fields.name==a.roomName&&(a.obj=b,a.id=b.id)});this.panels=this.obj.referenced.panels;this.addPanel=function(b){c.editRecord(b,"0","panels",{room_id:a.id})};this.config=c.config;var b={};angular.isObject(this.config.rooms)||(this.config.rooms={});angular.isObject(this.config.rooms[a.id])||(this.config.rooms[this.id]={groups:{}});
b=this.config.rooms[this.id];this.getGroups=function(){var h={};angular.forEach(b.groups,function(a,b){h[b]=!0});angular.forEach(a.panels,function(a){angular.isDefined(b.groups[a.fields.grouping])||(b.groups[a.fields.grouping]={opened:!1});h[a.fields.grouping]=!1});angular.forEach(h,function(a,h){a&&delete b.groups[h]});return b.groups};this.panelControls=function(a){if(angular.isDefined(a.referenced.panel_controls))return a.referenced.panel_controls};this.toggleGroup=function(a){a.opened=!a.opened;
c.updateConfig()}}];DevCtrl.MainCtrl=["$state","$mdSidenav","DataService","MenuService",function(d,c,a,b){this.msg="Hello World!";this.tiles=[{img:"/images/orc.png"},{img:"/images/pict.png"},{img:"/images/sage.png"}];this.$state=d;this.schema=a.schema;this.menu=b;this.control_endpoints=a.getTable("control_endpoints");this.config=a.config;this.user=a.dataModel.user;this.updateConfig=function(){a.updateConfig()};this.toggleSidenav=function(a){c(a).toggle()};this.go=function(a){angular.isString(a)?d.go(a):d.go(a.name,a.params)};
this.addEndpoint=function(b){a.editRecord(b,0,"control_endpoints")};this.addEndpointType=function(b){a.editRecord(b,0,"endpoint_types")};this.dataModel=a.dataModel;this.title="DevCtrl";this.top=!0;this.adminEnabled=function(){return a.isAdminAuthorized()};this.adminLogin=function(){a.getAdminAuth(!0)};this.revokeAdmin=function(){a.revokeAdminAuth()}}];DevCtrl.AdminOnly={};DevCtrl.AdminOnly.Directive=["$compile","DataService",function(d,c){return{restrict:"A",replace:!1,terminal:!0,priority:1E3,link:function(a,b,h){var g=!1;"invert"==b.attr("devctrl-admin-only")&&(g=!0);b.removeAttr("devctrl-admin-only");b.attr("ng-if","adminEnabled()");a.adminEnabled=function(){var a=c.isAdminAuthorized()&&c.config.editEnabled;g&&(a=!a);return a};d(b)(a)}}}];DevCtrl.Menu={};DevCtrl.Menu.Directive=["MenuService","$state",function(d,c){return{scope:!0,bindToController:{},controller:function(a,b){this.service=a},controllerAs:"menu",templateUrl:"ng/menu.html"}}];DevCtrl.DataService={};
DevCtrl.DataService.factory=["$window","$http","$mdToast","$timeout","socketFactory","$mdDialog","$location",function(d,c,a,b,h,g,k){var e={},l={},r=!1,t=c.get("schema.php").success(function(a){angular.isDefined(a.schema)&&angular.forEach(a.schema,function(a,b){var p=f.getSchema(b);angular.merge(p,a);angular.isDefined(p.foreign_keys)&&angular.forEach(p.foreign_keys,function(a,b){p.referenced[a]=b})});r=!0}).error(function(a){f.errorToast(a)}),m=io("https://devctrl.dwi.ufl.edu/");h=h({ioSocket:m});
var q={},n={};e.user={username:null,admin:!1};m={editEnabled:!0};if("undefined"!==typeof d.localStorage){var u=d.localStorage.config;angular.isString(u)?m=JSON.parse(u):d.localStorage.config=JSON.stringify(m)}var f={config:m,messenger:h,dataModel:e,schema:l,addRow:function(a,b){c.post("data.php",a).then(function(c){var d=Object.keys(c.data.add[a.tableName])[0];console.log("new record "+d+"added to "+a.tableName);f.loadData(c.data);c=e[a.tableName].indexed[d];angular.forEach(a,function(b,c){"table"!=
c&&(a[c]=null)});angular.isFunction(b)&&b(c)},function(a){f.errorToast(a.data)})},deleteRow:function(a){var b="data.php/"+a.tableName+"/"+a.id,d=!1;angular.forEach(a.referenced,function(a,b){0<Object.keys(a).length&&(d=b)});d?f.errorToast({error:"Cannot delete "+a.tableName+" record due to foreign key constraint on "+d}):c.delete(b).success(function(a){f.loadData(a)}).error(function(a){f.errorToast(a)})},editEnum:function(a,b,c,d){angular.isObject(d)||(d={});g.show({targetEvent:a,locals:{myEnum:b,
enumRefRecord:c,options:d},controller:DevCtrl.EnumEditor.Ctrl,controllerAs:"editor",bindToController:!0,templateUrl:"ng/enum-editor.html",clickOutsideToClose:!0,hasBackdrop:!1})},editRecord:function(a,b,c,d){"0"!==b?b=f.getRowRef(c,b):(b=f.getNewRowRef(c),angular.isObject(d)&&angular.merge(b.fields,d));g.show({targetEvent:a,locals:{obj:b},controller:DevCtrl.Record.Ctrl,controllerAs:"record",bindToController:!0,templateUrl:"ng/record.html",clickOutsideToClose:!0,hasBackdrop:!1})},editRecordClose:function(){g.hide()},
errorToast:function(b){var c="An unknown error has occured";angular.isDefined(b.error)&&(c=b.error);a.show({templateUrl:"ng/error-toast.html",locals:{message:c},controllerAs:"toast",controller:"RoomsCtrl",bindToController:!0,position:"top right",hideDelay:3E3})},getAdminAuth:function(a){var b="admin_auth.php";a&&(b="admin_auth.php?logon=1&location="+k.path());return c.get(b).then(function(a){angular.isDefined(a.data.user)?angular.merge(e.user,a.data.user):console.log("admin_auth did not return an admin status")},
function(b){"401"==b.status&&(a&&angular.isDefined(b.data.location)?window.location=b.data.location:(angular.isDefined(b.data.user)&&angular.merge(e.user,b.data.user),f.errorToast(b.data)))})},getNewRowRef:function(a){var b={id:"0",referenced:{},tableName:a,fields:{}};a=f.getSchema(a);angular.forEach(a.fields,function(a,c){b.fields[c]=""});return b},getRowRef:function(a,b){if(!angular.isDefined(a))return console.error("error looking up record for undefined table"),{};if(!angular.isDefined(b)||null===
b)return console.error("error looking up %s record for undefined key",a),{};var c=this.getTableRef(a);if(angular.isString(l[a].pk))return angular.isDefined(c.indexed[b])||(c.indexed[b]={fields:{},foreign:{},id:b,loaded:!1,referenced:{},tableName:a},c.listed.push(c.indexed[b])),c.indexed[b];console.error("multi column keys not supported, table %s",a)},getMenu:function(){angular.isDefined(e.menu)||(e.menu={items:{}},c.get("menu.php").success(function(a){angular.isDefined(a.menu.items)?(console.log("test/menu.php loaded"),
e.menu.items=a.menu.items):console.log("test/menu.php did not return a valid menu object")}).error(function(a){f.errorToast(a)}));return e.menu},getSchema:function(a){l.loaded||angular.isDefined(l[a])||(l[a]={referenced:{},foreign_keys:{}});return l[a]},getTable:function(a){angular.isDefined(e[a])?angular.isDefined(n[a])||(n[a]=this.getTablePromise(a)):(this.getTableRef(a),n[a]=this.getTablePromise(a));return e[a]},getTablePromise:function(a){if(angular.isDefined(n[a]))return n[a];if(angular.isDefined(a))return c.get("data.php?table="+
a).success(function(a){f.loadData(a)}).error(function(a){f.errorToast(a)});console.error("error: attempt to fetch undefined table!")},getTableRef:function(a){angular.isDefined(e[a])||(e[a]={listed:[],indexed:{},loaded:!1});return e[a]},isAdminAuthorized:function(){return e.user.admin},loadData:function(a){r?f.loadDataKernel(a):t=t.then(function(){f.loadDataKernel(a)})},loadDataKernel:function(a){angular.isDefined(a.update)&&angular.forEach(a.update,function(a,b){angular.forEach(a,function(a,c){var d=
f.getRowRef(b,c);angular.merge(d.fields,a)})});angular.isDefined(a.add)&&angular.forEach(a.add,function(a,b){var c=f.getSchema(b),d=c.pk,h=c.foreign_keys;angular.forEach(a,function(a,c){if(angular.isString(d)){var g=f.getRowRef(b,c);angular.merge(g.fields,a);g.loaded=!0;angular.forEach(h,function(a,c){if(null!==g.fields[c]){var d=f.getRowRef(a,g.fields[c]);angular.isDefined(d.referenced[b])||(d.referenced[b]={});d.referenced[b][g.id]=g;g.foreign[a]=d;g.foreign[c]=d}else g.foreign[a]=null,g.foreign[c]=
null})}else console.error("Error loading %s, multi-keyed records not supported",b)})});angular.isDefined(a.delete)&&angular.forEach(a.delete,function(a,b){var c=f.getSchema(b).pk;angular.forEach(a,function(a,c){angular.forEach(e[b].indexed[c].foreign,function(a,d){angular.isDefined(a.referenced[b][c])&&delete a.referenced[b][c]});delete e[b].indexed[c]});e[b].listed.length=0;angular.forEach(e[b].indexed,function(a,d){angular.isString(c)?e[b].listed.push(a):angular.forEach(a,function(a){e[b].listed.push(a)})})})},
revokeAdminAuth:function(){c.get("admin_auth_revoke.php").then(function(a){angular.isDefined(a.data.user)?angular.merge(e.user,a.data.user):console.log("revoke admin_auth did not return user info")},function(a){f.errorToast(a.data)})},updateConfig:function(){"undefined"!==typeof d.localStorage&&(d.localStorage.config=JSON.stringify(f.config))},updateControlValue:function(a){angular.isDefined(q[a.id])&&b.cancel(q[a.id]);q[a.id]=b(function(a,b){var d="control.php/"+a.id;pendingDebounce=!1;c.put(d,a.fields).success(function(a){b.loadData(a)}).error(function(a){b.errorToast(a)})},
200,!0,a,f)},updateRow:function(a){c.put("data.php/"+a.tableName+"/"+a.id,a.fields).success(function(a){f.loadData(a)}).error(function(a){f.errorToast(a)})}};h.on("control-data",function(a){f.loadData(a)});return f}];DevCtrl.Slider2d={};
DevCtrl.Slider2d.Directive=["DataService",function(d){return{scope:{control:"="},bindToController:!0,controller:function(c){var a=this,b,d;this.xValue=function(c){angular.isDefined(c)?(b=c,a.control.ctrl.fields.value=b+","+d):this.setXYVals();return b};this.yValue=function(c){angular.isDefined(c)?(d=c,a.control.ctrl.fields.value=b+","+d):this.setXYVals();return d};this.setXYVals=function(){var c=a.control.ctrl.fields.value.split(",");b=angular.isDefined(c[0])?c[0]:0;b=parseInt(b);d=angular.isDefined(c[1])?
c[1]:0;d=parseInt(d)};this.setXYVals();this.updateValue=function(){c.updateControlValue(a.control.ctrl)}},controllerAs:"slider2d",templateUrl:"ng/controls/slider2d.html"}}];DevCtrl.EnumSelect={};
DevCtrl.EnumSelect.Directive=["DataService",function(d){return{scope:{tableName:"=table",field:"=",selectModel:"="},bindToController:!0,controller:function(c){this.enums=c.getTable("enums");this.enumVals=c.getTable("enum_vals");this.schema=c.getSchema(this.tableName);this.enumId=function(){var a=0,b=this.tableName+"."+this.field.name;angular.forEach(this.enums.indexed,function(c,d){c.fields.name==b&&(a=d)});return a};this.options=function(){var a=this.enumId(),b={};0<a&&(b=this.enums.indexed[a].referenced.enum_vals);return b}},
controllerAs:"enumSelect",templateUrl:"ng/enum-select.html"}}];DevCtrl.Ctrl={};
DevCtrl.Ctrl.Directive=["DataService",function(d){return{scope:{panelControl:"=",controlId:"="},bindToController:!0,controller:function(c){(this.panelContext=angular.isDefined(this.panelControl))?(this.ctrl=this.panelControl.foreign.controls,this.name=this.panelControl.fields.name):(this.ctrl=c.getTable("controls").indexed[this.controlId],this.name=this.ctrl.fields.name);this.ctrlName=function(){return this.panelContext?this.panelControl.fields.name:""!=this.ctrl.fields.name?this.ctrl.fields.name:this.ctrl.foreign.control_templates.fields.name};
this.template=this.ctrl.foreign.control_templates;this.config=function(a){if(angular.isObject(this.ctrl.fields.config)&&angular.isDefined(this.ctrl.fields.config[a]))return this.ctrl.fields.config[a];if(angular.isObject(this.template.fields.config)&&angular.isDefined(this.template.fields.config[a]))return this.template.fields.config[a]};this.intConfig=function(b){b=a.config(b);return parseInt(b)};this.appConfig=c.config;this.type=this.template.fields.usertype;this.enums=c.getTable("enums");this.enumVals=
c.getTable("enum_vals");var a=this;this.normalizedValue=function(){var b=a.ctrl.fields.value,c=a.intConfig("max"),d=a.intConfig("min"),b=b<d?d:b;return((b>c?c:b)+(0-d))*(c-d)/100};this.updateValue=function(){c.updateControlValue(a.ctrl)};this.editOptions=function(b){c.editEnum(b,null,a.ctrl,{title:"Edit "+a.name+" options"})};this.selectMenuItem=function(b){a.ctrl.fields.value=b;a.updateValue()};this.selectOptions=function(){var b=a.ctrl.fields.enum_id,c={};0<b&&(c=a.enums.indexed[b].referenced.enum_vals);
return c};this.editPanelControl=function(b){c.editRecord(b,a.panelControl.id,"panel_controls")};this.editControl=function(b){c.editRecord(b,a.ctrl.id,"controls")};this.editTemplate=function(b){c.editRecord(b,a.template.id,"control_templates")}},controllerAs:"ctrl",templateUrl:"ng/ctrl.html"}}];DevCtrl.Record={};DevCtrl.Record.Ctrl=["DataService",function(d){this.newRow="0"===this.obj.id;this.schema=d.getSchema(this.obj.tableName);var c=this;this.addRow=function(){d.addRow(c.obj);d.editRecordClose()};this.deleteRow=function(){d.deleteRow(c.obj);d.editRecordClose()};this.updateRow=function(){d.updateRow(c.obj);d.editRecordClose()};this.cloneRow=function(){var a=d.getNewRowRef(c.obj.tableName);a.fields=c.obj.fields;d.addRow(a);d.editRecordClose()};this.close=function(){d.editRecordClose()}}];DevCtrl.MenuService={};
DevCtrl.MenuService.factory=["$state","DataService",function(d,c){var a={pageTitle:function(){return d.current.title||d.params.name},parentState:function(){return d.get("^")},isFirstLevel:function(){return""===d.current.name||""===d.get("^").name},items:{},states:function(){return d.get()},menuItems:function(){var b=d.get();angular.forEach(b,function(b,c){""!=b.name&&(b.isOpened=d.includes(b),""==d.get("^",b).name&&(a.items[b.name]=b,angular.isDefined(b.substates)||(b.substates={})),angular.isDefined(b.data.title)&&
(b.title=b.data.title))});angular.forEach(b,function(b,g){if(""!=b.name){var k=d.get("^",b);if(angular.isDefined(a.items[k.name]))if(angular.isDefined(b.data.listByName)){var e=c.getTable(b.data.listByName).listed;angular.forEach(e,function(a){angular.isDefined(k.substates[a.id])?(k.substates[a.id].params.name=a.fields.name,k.substates[a.id].title=a.fields.name):k.substates[a.id]={name:b.name,params:{name:a.fields.name,id:a.id},title:a.fields.name}})}else a.items[k.name].substates[b.name]=b}});return a.items}};
return a}];DevCtrl.EndpointStatus={};
DevCtrl.EndpointStatus.Directive=["DataService",function(d){return{scope:{endpointId:"="},bindToController:!0,controller:function(c){var a=this;this.endpoint=c.getRowRef("control_endpoints",this.endpointId);this.status=function(){return a.endpoint.fields.enabled?""==a.endpoint.fields.status||null==a.endpoint.fields.status?"unknown":a.endpoint.fields.status:"disabled"};this.statusIcon=function(){var b=a.status();return"online"==b?"sync":"disconnected"==b?"sync_problem":"disabled"==b?"sync_disabled":
"help"};this.statusIconClasses=function(){var b=a.status();return"disabled"==b?"md-disabled":"disconnected"==b?"md-warn":"md-primary md-hue-2"}},controllerAs:"endpointStatus",templateUrl:"ng/endpoint-status.html"}}];DevCtrl.Endpoint={};
DevCtrl.Endpoint.Ctrl=["$stateParams","DataService",function(d,c){var a=this;this.endpointId=d.id;this.endpoints=c.getTable("control_endpoints");this.obj=this.endpoints.indexed[this.endpointId];d.name=this.obj.fields.name;this.controls=this.obj.referenced.controls;this.togglePanel=function(a){angular.isDefined(a.opened)?a.opened=!a.opened:a.opened=!0};this.isPanelOpen=function(a){return angular.isDefined(a.opened)&&a.opened};this.addTemplate=function(b){c.editRecord(b,"0","control_templates",{endpoint_type_id:a.obj.fields.endpoint_type_id})};
this.editEndpoint=function(a){c.editRecord(a,this.endpointId,"control_endpoints")}}];DevCtrl.PanelControlSelector={};
DevCtrl.PanelControlSelector.Ctrl=["$mdDialog","DataService",function(d,c){var a=this;this.endpointTypes=c.getTable("endpoint_types");this.endpoints=c.getTable("control_endpoints");this.controls=c.getTable("controls");this.control_templates=c.getTable("control_templates");this.newPanelControl=c.getNewRowRef("panel_controls");this.newPanelControl.fields.panel_id=this.panelId;this.endpointTypesSelected=[];this.endpointsSelected=[];this.getEndpointTypes=function(){return this.endpointTypes.indexed};this.getEndpoints=
function(){return this.endpoints.indexed};this.controlList={};this.getControls=function(){angular.forEach(a.controls.indexed,function(b){var c=!1,d=!0;if(angular.isArray(a.endpointsSelected)&&0<a.endpointsSelected.length){var d=!1,k=b.fields.control_endpoint_id;angular.forEach(a.endpointsSelected,function(a){a==k&&(c=!0)})}else if(angular.isArray(a.endpointTypesSelected)&&0<a.endpointTypesSelected.length){var d=!1,e=b.foreign.control_endpoints.fields.endpoint_type_id;angular.forEach(a.endpointTypesSelected,
function(a){e==a&&(c=!0)})}c||d?a.controlList[b.id]=b:delete a.controlList[b.id]});return a.controlList};this.endpointList={};this.getEndpoints=function(){angular.forEach(a.endpoints.indexed,function(b){var c=!1,d=!0;if(angular.isArray(a.endpointTypesSelected)&&0<a.endpointTypesSelected.length){var d=!1,k=b.fields.endpoint_type_id;angular.forEach(a.endpointTypesSelected,function(a){k==a&&(c=!0)})}c||d?a.endpointList[b.id]=b:delete a.endpointList[b.id]});return a.endpointList};this.clearEndpointTypes=
function(){a.endpointTypesSelected=void 0};this.clearEndpoints=function(){a.endpointsSelected=void 0};this.addPanelControl=function(){c.addRow(a.newPanelControl);d.hide()};this.cancelAdd=function(){d.hide()}}];DevCtrl.EnumEditor={};
DevCtrl.EnumEditor.Ctrl=["$mdDialog","DataService",function(d,c){var a=this;this.enums=c.getTable("enums");this.enumVals=c.getTable("enum_vals");this.newEnumValue=c.getNewRowRef("enum_vals");this.isAddingEnum=!1;this.title=function(){return angular.isString(a.options.title)?a.options.title:"Edit "+a.myEnum.fields.name+" values"};this.isEnumSelectable=function(){return angular.isObject(a.enumRefRecord)};this.updateEnumValue=function(a){c.updateRow(a)};this.addEnumValue=function(){a.newEnumValue.fields.enum_id=a.myEnum.id;
a.newEnumValue.fields.enabled=1;c.addRow(a.newEnumValue);a.newEnumValue=c.getNewRowRef("enum_vals")};this.newEnumCallback=function(b){a.enumRefRecord.fields.enum_id=b.id;a.updateEnum()};this.deleteEnumValue=function(a){c.deleteRow(a)};this.updateEnum=function(){0==a.enumRefRecord.fields.enum_id?a.isAddingEnum=!0:(a.myEnum=a.enums.indexed[a.enumRefRecord.fields.enum_id],c.updateRow(a.enumRefRecord))};this.addNewEnum=function(){a.newEnum=c.getNewRowRef("enums");a.newEnum.fields.name=a.newEnumName;c.addRow(a.newEnum,
a.newEnumCallback);a.newEnumName="";a.isAddingEnum=!1};this.isEnumSelectable&&(a.myEnum=a.enums.indexed[a.enumRefRecord.fields.enum_id]);this.close=function(){d.hide()}}];DevCtrl.FkSelect={};DevCtrl.FkSelect.Directive=["DataService",function(d){return{scope:{tableName:"=table",field:"=",selectModel:"=",fkOnChange:"=",addNewOption:"="},bindToController:!0,controller:function(c){var a=this;this.options=c.getTable(this.tableName);this.schema=c.getSchema(this.tableName);this.updateValue=function(){angular.isFunction(a.fkOnChange)&&a.fkOnChange()}},controllerAs:"fkSelect",templateUrl:"ng/fk-select.html"}}];DevCtrl.Table={};
DevCtrl.Table.Ctrl=["$scope","$stateParams","DataService",function(d,c,a){var b=this;this.tableName=c.name;this.data=a.getTable(this.tableName);this.schema=a.getSchema(this.tableName);this.newRow={table:this.tableName};a.messenger.emit("status-update",{message:"table "+this.tableName+" loaded"});this.sortColumn="id";this.sortReversed=!1;this.setSortColumn=function(a){"fields."+a.name===this.sortColumn?this.sortReversed=!this.sortReversed:(this.sortColumn="fields."+a.name,this.sortReversed=!1)};this.deleteRow=
function(b){b.table=this.tableName;a.deleteRow(b)};this.fkDisplayVal=function(b,c){var d=a.getSchema(this.schema.foreign_keys[b.name]);if(!angular.isDefined(c.foreign[b.name]))return"";var e=c.foreign[b.name];if(null==e)return"NULL";var l=e.id;angular.isDefined(e.fields[d.fk_name])&&(l=e.fields[d.fk_name]);return l};this.addRow=function(c){a.editRecord(c,"0",b.tableName)};this.openRecord=function(c,d){a.editRecord(c,d,b.tableName)};this.updateRow=function(b,c){a.updateRow(c)}}];
DevCtrl.Table.Resolve={tableName:["$stateParams",function(d){return d.table}]};DevCtrl.Rooms={};DevCtrl.Rooms.Ctrl=["DataService",function(d){this.list=d.getTable("rooms").listed;this.imageUrl=function(c){return"/images/"+c.fields.name+".png"}}];DevCtrl.Panel={};
DevCtrl.Panel.Directive=["$mdDialog","DataService",function(d,c){return{scope:!0,bindToController:{panelObj:"="},controller:function(a,b){var c=this;this.fields=this.panelObj.fields;this.addControl=function(b){a.show({targetEvent:b,locals:{panelId:this.panelObj.id},controller:DevCtrl.PanelControlSelector.Ctrl,controllerAs:"selector",bindToController:!0,templateUrl:"ng/panel-control-selector.html",clickOutsideToClose:!0,hasBackdrop:!1})};this.editPanel=function(a){b.editRecord(a,this.panelObj.id,this.panelObj.tableName)};
this.setAllSwitches=function(a){angular.forEach(c.panelObj.referenced.panel_controls,function(c){c=c.foreign.controls;"switch"==c.fields.usertype&&(c.fields.value=a,b.updateControlValue(c))})}},controllerAs:"panel",templateUrl:"ng/panel.html"}}];DevCtrl.App=angular.module("DevCtrlApp",["ui.router","ngMaterial","btford.socket-io","angular-toArrayFilter"]).factory("DataService",DevCtrl.DataService.factory).factory("MenuService",DevCtrl.MenuService.factory).directive("ctrl",DevCtrl.Ctrl.Directive).directive("coeMenu",DevCtrl.Menu.Directive).directive("devctrlPanel",DevCtrl.Panel.Directive).directive("fkSelect",DevCtrl.FkSelect.Directive).directive("enumSelect",DevCtrl.EnumSelect.Directive).directive("devctrlSlider2d",DevCtrl.Slider2d.Directive).directive("devctrlObjectEditor",
DevCtrl.ObjectEditor.Directive).directive("devctrlAdminOnly",DevCtrl.AdminOnly.Directive).directive("devctrlEndpointStatus",DevCtrl.EndpointStatus.Directive).controller("MainCtrl",DevCtrl.MainCtrl).controller("EnumEditorCtrl",DevCtrl.EnumEditor.Ctrl).controller("PanelControlSelectorCtrl",DevCtrl.PanelControlSelector.Ctrl).controller("EndpointCtrl",DevCtrl.Endpoint.Ctrl).controller("TableCtrl",DevCtrl.Table.Ctrl).controller("RecordCtrl",DevCtrl.Record.Ctrl).controller("RoomCtrl",DevCtrl.Room.Ctrl).controller("RoomsCtrl",
DevCtrl.Rooms.Ctrl).config(DevCtrl.stateConfig).run(["$rootScope",function(d){d.$on("$stateChangeStart",function(c,a,b,d,g){console.log("$stateChangeStart to "+a.to+"- fired when the transition begins. toState,toParams : \n",a,b)});d.$on("$stateChangeError",function(c,a,b,d,g){console.log("$stateChangeError - fired when an error occurs during transition.");console.log(arguments)});d.$on("$stateChangeSuccess",function(c,a,b,d,g){console.log("$stateChangeSuccess to "+a.name+"- fired once the state transition is complete.")});
d.$on("$viewContentLoaded",function(c){console.log("$viewContentLoaded - fired after dom rendered",c)});d.$on("$stateNotFound",function(c,a,b,d){console.log("$stateNotFound "+a.to+"  - fired when a state cannot be found by its name.");console.log(a,b,d)})}]);
