var DevCtrl={stateConfig:["$stateProvider","$locationProvider","$urlRouterProvider",function(b,e,c){b.state("root",{"abstract":!0,url:"",template:"<ui-view />"}).state("root.rooms",{url:"/rooms",templateUrl:"ng/locations.html"}).state("root.room",{url:"/room/:name",templateUrl:"ng/room.html",controller:"RoomCtrl",controllerAs:"room",resolve:DevCtrl.Room.Resolve}).state("root.config",{"abstract":!0,url:"/config",template:"<ui-view />"}).state("root.config.all",{url:"",templateUrl:"ng/config.html"}).state("root.config.table",
{url:"/:table",templateUrl:"ng/tableeditor.html",controller:"TableCtrl",controllerAs:"table",resolve:DevCtrl.Table.Resolve});c.when("/","/rooms");e.html5Mode(!0)}]};DevCtrl.Room={};
DevCtrl.Room.Ctrl=["$stateParams","DataService",function(b,e){var c=this;this.roomName=b.name;this.rooms=e.getTable("rooms");angular.forEach(this.rooms.listed,function(a){a.fields.name==c.roomName&&(c.obj=a,c.id=a.id)});this.panels=this.obj.referenced.panels;this.panelControls=function(a){if(angular.isDefined(a.referenced.panel_controls))return a.referenced.panel_controls};this.togglePanel=function(a){angular.isDefined(a.opened)?a.opened=!a.opened:a.opened=!0};this.isPanelOpen=function(a){return angular.isDefined(a.opened)&&a.opened}}];
DevCtrl.Room.Resolve={loadControls:function(b){return b.getTablePromise("controls")},loadControlTemplates:function(b){return b.getTablePromise("control_templates")},loadRooms:function(b){return b.getTablePromise("rooms")},loadPanels:function(b){return b.getTablePromise("panels")},loadPanelControls:function(b){return b.getTablePromise("panel_controls")},loadControlSets:function(b){return b.getTablePromise("control_sets")}};DevCtrl.MainCtrl=["$state","$mdSidenav","DataService",function(b,e,c){this.msg="Hello World!";this.tiles=[{img:"/images/orc.png"},{img:"/images/pict.png"},{img:"/images/sage.png"}];this.menu=c.getMenu();this.schema=c.getSchemas();this.toggleSidenav=function(a){e(a).toggle()};this.go=function(a){angular.isString(a)?b.go(a):b.go(a.name,a.params)};this.dataModel=c.dataModel}];DevCtrl.Menu={};DevCtrl.Menu.Directive=function(){return{scope:!0,bindToController:{items:"="},controller:function(){},controllerAs:"menu",templateUrl:"ng/menu.html"}};DevCtrl.DataService={};
DevCtrl.DataService.factory=["$http","$mdToast","$timeout","socketFactory",function(b,e,c,a){var d={},g={},l=io("https://devctrl.dwi.ufl.edu/");a=a({ioSocket:l});var h={},k={messenger:a,dataModel:d,addRow:function(f){var a=this;b.post("data.php",f).success(function(b){a.loadData(b);angular.forEach(f,function(a,b){"table"!=b&&(f[b]=null)})}).error(function(f){a.errorToast(f)})},deleteRow:function(f){var a=this;b.delete("data.php/"+f.tableName+"/"+f.id).success(function(f){a.loadData(f)}).error(function(f){a.errorToast(f)})},errorToast:function(f){var a=
"An unknown error has occured";angular.isDefined(f.error)&&(a=f.error);e.show(e.simple().content(a))},getRowRef:function(a,b){if(!angular.isDefined(a))return console.error("error looking up record for undefined table"),{};if(!angular.isDefined(b)||null===b)return console.error("error looking up %s record for undefined key",a),{};var c=this.getTableRef(a);if(angular.isString(g[a].pk))return angular.isDefined(c.indexed[b])||(c.indexed[b]={fields:{},foreign:{},id:b,loaded:!1,referenced:{},tableName:a},
c.listed.push(c.indexed[b])),c.indexed[b];console.error("multi column keys not supported, table %s",a)},getMenu:function(){var a=this;angular.isDefined(d.menu)||(d.menu={items:{}},b.get("menu.php").success(function(a){angular.isDefined(a.menu.items)?(console.log("test/menu.php loaded"),d.menu.items=a.menu.items):console.log("test/menu.php did not return a valid menu object")}).error(function(b){a.errorToast(b)}));return d.menu},getSchema:function(a){var c=this;angular.isDefined(g[a])||(c.getSchemaRef(a),
b.get("schema.php").success(function(a){angular.isDefined(a.schema)&&angular.forEach(a.schema,function(a,b){var f=c.getSchemaRef(b);angular.merge(f,a);angular.isDefined(f.foreign_keys)&&angular.forEach(f.foreign_keys,function(a,b){f.referenced[a]=b})})}).error(function(a){c.errorToast(a)}));return g[a]},getSchemaRef:function(a){angular.isDefined(g[a])||(g[a]={referenced:{},foreign_keys:{}});return g[a]},getSchemas:function(){this.getSchema("controls");return g},getTable:function(a){angular.isDefined(d[a])?
d[a].loaded||(d[a].loaded="pending",this.getTablePromise(a)):(this.getTableRef(a),this.getTablePromise(a));return d[a]},getTablePromise:function(a){var c=this;if(angular.isDefined(a))return b.get("data.php?table="+a).success(function(a){c.loadData(a)}).error(function(a){c.errorToast(a)});console.error("error: attempt to fetch undefined table!")},getTableRef:function(a){angular.isDefined(d[a])||(d[a]={listed:[],indexed:{},loaded:!1});return d[a]},loadData:function(a){var b=this;angular.isDefined(a.update)&&
angular.forEach(a.update,function(a,c){angular.forEach(a,function(a,d){var e=b.getRowRef(c,d);angular.merge(e.fields,a)})});angular.isDefined(a.add)&&angular.forEach(a.add,function(a,c){var e=b.getSchema(c),g=e.pk,f=e.foreign_keys;angular.forEach(a,function(a,e){if(angular.isString(g)){var d=b.getRowRef(c,e);angular.merge(d.fields,a);d.loaded=!0;angular.forEach(f,function(a,e){if(null!==d.fields[e]){var g=b.getRowRef(a,d.fields[e]);angular.isDefined(g.referenced[c])||(g.referenced[c]={});g.referenced[c][d.id]=
d;d.foreign[a]=g;d.foreign[e]=g}else d.foreign[a]=null,d.foreign[e]=null})}else console.error("Error loading %s, multi-keyed records not supported",c)});d[c].loaded="loaded"});angular.isDefined(a.delete)&&angular.forEach(a.delete,function(a,c){var e=b.getSchema(c).pk;angular.forEach(a,function(a,b){angular.isString(e)?delete d[c].indexed[b]:angular.forEach(a,function(a,e){delete d[c].indexed[b][e]})});d[c].listed.length=0;angular.forEach(d[c].indexed,function(a,b){angular.isString(e)?d[c].listed.push(a):
angular.forEach(a,function(a){d[c].listed.push(a)})})})},updateControlValue:function(a){angular.isDefined(h[a.id])&&c.cancel(h[a.id]);h[a.id]=c(function(a,c){var e="control.php/"+a.id;pendingDebounce=!1;b.put(e,a.fields).success(function(a){c.loadData(a)}).error(function(a){c.errorToast(a)})},200,!0,a,this)},updateRow:function(a){var c=this;b.put("data.php/"+a.tableName+"/"+a.id,a.fields).success(function(a){c.loadData(a)}).error(function(a){c.errorToast(a)})}};a.on("control-data",function(a){k.loadData(a);
console.log("socket control data received")});return k}];DevCtrl.EnumSelect={};
DevCtrl.EnumSelect.Directive=["DataService",function(b){return{scope:{tableName:"=table",field:"=",selectModel:"="},bindToController:!0,controller:function(b){this.enums=b.getTable("enums");this.enumVals=b.getTable("enum_vals");this.schema=b.getSchema(this.tableName);this.enumId=function(){var c=0,a=this.tableName+"."+this.field.name;angular.forEach(this.enums.indexed,function(b,e){b.fields.name==a&&(c=e)});return c};this.options=function(){var c=this.enumId(),a={};0<c&&(a=this.enums.indexed[c].referenced.enum_vals);return a}},
controllerAs:"enumSelect",templateUrl:"ng/enum-select.html"}}];DevCtrl.Ctrl={};
DevCtrl.Ctrl.Directive=["DataService",function(b){return{scope:{panelControl:"="},bindToController:!0,controller:function(b){this.ctrl=this.panelControl.foreign.controls;this.template=this.ctrl.foreign.control_templates;this.name=this.panelControl.fields.name;this.type=this.template.fields.usertype;this.enums=b.getTable("enums");this.enumVals=b.getTable("enum_vals");var c=this;this.normalizedValue=function(){var a=c.ctrl.fields.value,b=c.template.fields.max,e=c.template.fields.min,a=a<e?e:a;return((a>
b?b:a)+(0-e))*(b-e)/100};this.updateValue=function(){b.updateControlValue(c.ctrl)};this.selectMenuItem=function(a){c.ctrl.fields.value=a;c.updateValue()};this.selectOptions=function(){var a=c.ctrl.fields.enum_id,b={};0<a&&(b=c.enums.indexed[a].referenced.enum_vals);return b}},controllerAs:"ctrl",templateUrl:"ng/ctrl.html"}}];DevCtrl.SwitchSet={};
DevCtrl.SwitchSet.Directive=["DataService",function(b){return{scope:!0,bindToController:{control:"="},controller:function(b){var c=this,a={},d={};this.setAll=function(c){angular.forEach(a,function(a,d){a.fields.value=c;b.updateControlValue(a)})};this.slaveControls=function(){angular.forEach(c.control.referenced.control_sets,function(b,c){d[b.foreign.slave_control_id.id]=b.fields.name;a[b.foreign.slave_control_id.id]=b.foreign.slave_control_id});return a};this.slaveName=function(a){return d[a.id]};this.updateCtrlValue=
function(a){b.updateControlValue(a)}},controllerAs:"switchSet",templateUrl:"ng/switch-set.html"}}];DevCtrl.Record={};DevCtrl.Record.Ctrl=["DataService",function(b){this.obj=this.table.data.indexed[this.id];this.schema=this.table.schema;var e=this;this.deleteRow=function(){b.deleteRow(e.obj);this.table.closeRecord()};this.updateRow=function(){b.updateRow(e.obj);this.table.closeRecord()};this.cloneRow=function(){var c=angular.copy(e.obj.fields);c.table=e.obj.tableName;b.addRow(c);this.table.closeRecord()};this.close=function(){this.table.closeRecord()}}];
DevCtrl.Record.Resolve={loadTable:["tableName","DataService",function(b,e){return e.getTablePromise(b)}]};DevCtrl.FkSelect={};DevCtrl.FkSelect.Directive=["DataService",function(b){return{scope:{tableName:"=table",field:"=",selectModel:"="},bindToController:!0,controller:function(b){this.options=b.getTable(this.tableName);this.schema=b.getSchema(this.tableName)},controllerAs:"fkSelect",templateUrl:"ng/fk-select.html"}}];DevCtrl.Table={};
DevCtrl.Table.Ctrl=["$scope","$stateParams","$mdDialog","DataService",function(b,e,c,a){this.tableName=e.table;this.data=a.getTable(this.tableName);this.schema=a.getSchema(this.tableName);this.newRow={table:this.tableName};a.messenger.emit("status-update",{message:"table "+this.tableName+" loaded"});this.addRow=function(){a.addRow(this.newRow)};this.deleteRow=function(b){b.table=this.tableName;a.deleteRow(b)};this.fkDisplayVal=function(b,c){var e=a.getSchema(this.schema.foreign_keys[b.name]);if(!angular.isDefined(c.foreign[b.name]))return"";
var d=c.foreign[b.name];if(null==d)return"NULL";var f=d.id;angular.isDefined(d.fields[e.fk_name])&&(f=d.fields[e.fk_name]);return f};var d=this;this.openRecord=function(a,b){c.show({targetEvent:a,locals:{id:b,table:d},controller:DevCtrl.Record.Ctrl,controllerAs:"record",bindToController:!0,templateUrl:"ng/record.html",clickOutsideToClose:!0,hasBackdrop:!1})};this.closeRecord=function(){c.hide()}}];DevCtrl.Table.Resolve={tableName:["$stateParams",function(b){return b.table}]};DevCtrl.App=angular.module("DevCtrlApp",["ui.router","ngMaterial","btford.socket-io"]).factory("DataService",DevCtrl.DataService.factory).directive("ctrl",DevCtrl.Ctrl.Directive).directive("coeMenu",DevCtrl.Menu.Directive).directive("fkSelect",DevCtrl.FkSelect.Directive).directive("enumSelect",DevCtrl.EnumSelect.Directive).directive("switchSet",DevCtrl.SwitchSet.Directive).controller("MainCtrl",DevCtrl.MainCtrl).controller("TableCtrl",DevCtrl.Table.Ctrl).controller("RecordCtrl",DevCtrl.Record.Ctrl).controller("RoomCtrl",
DevCtrl.Room.Ctrl).config(DevCtrl.stateConfig).run(["$rootScope",function(b){b.$on("$stateChangeStart",function(b,c,a,d,g){console.log("$stateChangeStart to "+c.to+"- fired when the transition begins. toState,toParams : \n",c,a)});b.$on("$stateChangeError",function(b,c,a,d,g){console.log("$stateChangeError - fired when an error occurs during transition.");console.log(arguments)});b.$on("$stateChangeSuccess",function(b,c,a,d,g){console.log("$stateChangeSuccess to "+c.name+"- fired once the state transition is complete.")});
b.$on("$viewContentLoaded",function(b){console.log("$viewContentLoaded - fired after dom rendered",b)});b.$on("$stateNotFound",function(b,c,a,d){console.log("$stateNotFound "+c.to+"  - fired when a state cannot be found by its name.");console.log(c,a,d)})}]);
